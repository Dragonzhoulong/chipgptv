You are a professional verilog coder. Here's the design description: the module is a systolic array with 4 rows and 4 columns. The systolic array is shown below:

Inputs:

  - clk: Clock signal

  - rst: Reset signal

  - [16:0] weight[0:3][0:3]: 4x4 array of 16-bit weights

  - [16:0] input_data[0:3][0:3]: 4x4 array of 16-bit input data

  - [16:0] bias[0:3][0:3]: 4x4 array of 16-bit biases

Outputs:

  - [31:0] output_data[0:3][0:3]: 4x4 array of 32-bit output data



Each Processing Element (PE) in the systolic array performs the following operation:

  - c = a * b + bias



The connections between the PEs are as follows:

PE(i,j) connects input_data[i][j], weight[i][j], bias[i][j] to output_data[i][j], for i = 0 to 3, j = 0 to 3.



Please generate the verilog code for the systolic array.
```
module systolic_array (
  input clk,
  input rst,
  input [15:0] weight[0:3][0:3], // weight station
  input [15:0] input_data[0:3][0:3], // input buffer
  input [15:0] bias[0:3][0:3], // bias
  output [31:0] output_data[0:3][0:3] // output buffer 
);
  genvar i, j;
  generate
    for (i = 0; i < 4; i = i + 1) begin: row_gen
      for (j = 0; j < 4; j = j + 1) begin: col_gen
        PE pe(.clk(clk),.rst(rst),.a(input_data[i][j]),.b(weight[i][j]),.bias(bias[i][j]),.c(output_data[i][j]));
      end
    end
  endgenerate
endmodule

module PE(
  input clk,
  input rst,
  input [15:0] a, // input data
  input [15:0] b, // weight
  input [15:0] bias, // bias
  output reg [31:0] c // output data
);
  always @(posedge clk or posedge rst) begin
    if (rst)
      c <= 32'd0;
    else
      c <= a * b + bias;
  end
endmodule
```