Please act as a professional verilog designer.



Implement a FSM detection circuit that detects a single bit input IN. When the number of 1s in the input is modulo 5, the result is 4, output MATCH is high, and MATCH is 0 in other cases.



Module name:  

    fsm               

Input ports：

    input CLK,

    input RST,

    input IN

Output ports：

    output reg MATCH



The module is a finite state machine with 5 states, the finite state machine is shown below:

states: s0, s1, s2, s3, s4

Outputs: s0: 0, s1: 0, s2: 0, s3: 0, s4: 1

Transitions:

  s0: 0 -> s0, 1 -> s1

  s1: 0 -> s1, 1 -> s2

  s2: 0 -> s2, 1 -> s3

  s3: 0 -> s3, 1 -> s4

  s4: 0 -> s4, 1 -> s0



Please generate the verilog code for the finite state machine. 

```verilog
module fsm (
    input CLK,
    input RST,
    input IN,
    output reg MATCH
);

    parameter s0 = 2'b00;
    parameter s1 = 2'b01;
    parameter s2 = 2'b10;
    parameter s3 = 2'b11;
    parameter s4 = s0;

    reg [1:0] state, next_state;

    always @(posedge CLK) begin
        if(RST) begin
            state <= s0;
            MATCH <= 0;
        end else begin
            state <= next_state;
            MATCH <= (state == s4)? 1 : 0;
        end
    end

    always @ * begin
        case (state)
            s0: next_state = (IN == 1'b0)? s0 : s1;
            s1: next_state = (IN == 1'b0)? s1 : s2;
            s2: next_state = (IN == 1'b0)? s2 : s3;
            s3: next_state = (IN == 1'b0)? s3 : s4;
            s4: next_state = (IN == 1'b0)? s4 : s0;
        endcase
    end
endmodule
```
I have explained the design and implementation of the finite state machine. Let me know if you have any further questions.